[
  {
    "id": "tls-mqtt-flow",
    "type": "tab",
    "label": "Exercise 8: Secure MQTT Communication with TLS",
    "disabled": false,
    "info": "# Secure MQTT Communication with TLS\n\nThis flow demonstrates how to establish a secure MQTT connection using TLS (Transport Layer Security).\n\n## Prerequisites\n1.  An MQTT broker configured for TLS (e.g., Mosquitto with TLS enabled).\n2.  Valid TLS certificates (CA certificate, client certificate, and client key).\n\n## Configuration\n1.  Configure the MQTT broker node with the correct TLS settings.\n2.  Specify the paths to your TLS certificates.\n3.  Ensure that the MQTT broker is running and accessible.\n\n## Instructions\n1.  Import this flow into Node-RED.\n2.  Configure the MQTT broker node with your TLS settings.\n3.  Deploy the flow.\n4.  Observe the secure MQTT communication.",
    "env": []
  },
  {
    "id": "mqtt-broker-tls",
    "type": "mqtt-broker",
    "name": "MQTT Broker with TLS",
    "broker": "localhost",
    "port": "8883",
    "clientid": "",
    "usetls": true,
    "protocolVersion": "4",
    "keepalive": "60",
    "cleansession": true,
    "birthTopic": "",
    "birthQos": "0",
    "birthPayload": "",
    "closeTopic": "",
    "closeQos": "0",
    "closePayload": "",
    "willTopic": "",
    "willQos": "0",
    "willPayload": "",
    "tls": "tls-config"
  },
  {
    "id": "tls-config",
    "type": "tls-config",
    "name": "TLS Configuration",
    "cert": "",
    "key": "",
    "ca": "",
    "certname": "",
    "keyname": "",
    "caname": "",
    "verifyservercert": true,
    "servername": ""
  },
  {
    "id": "mqtt-in-tls",
    "type": "mqtt in",
    "z": "tls-mqtt-flow",
    "name": "MQTT In (TLS)",
    "topic": "workshop/tls/test",
    "qos": "0",
    "datatype": "utf8",
    "broker": "mqtt-broker-tls",
    "nl": false,
    "rap": true,
    "rh": 0,
    "x": 150,
    "y": 160,
    "wires": [
      [
        "debug-in"
      ]
    ]
  },
  {
    "id": "mqtt-out-tls",
    "type": "mqtt out",
    "z": "tls-mqtt-flow",
    "name": "MQTT Out (TLS)",
    "topic": "workshop/tls/test",
    "qos": "0",
    "retain": false,
    "respTopic": "",
    "contentType": "",
    "userProps": "",
    "correl": "",
    "expiry": "",
    "broker": "mqtt-broker-tls",
    "x": 510,
    "y": 160,
    "wires": []
  },
  {
    "id": "inject-message",
    "type": "inject",
    "z": "tls-mqtt-flow",
    "name": "Inject Message",
    "props": [
      {
        "p": "payload"
      },
      {
        "p": "topic",
        "vt": "str"
      }
    ],
    "repeat": "",
    "crontab": "",
    "once": false,
    "onceDelay": 0.1,
    "topic": "workshop/tls/test",
    "payload": "Hello from Node-RED with TLS!",
    "payloadType": "str",
    "x": 160,
    "y": 80,
    "wires": [
      [
        "mqtt-out-tls"
      ]
    ]
  },
  {
    "id": "debug-in",
    "type": "debug",
    "z": "tls-mqtt-flow",
    "name": "Debug In",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "payload",
    "targetType": "msg",
    "statusVal": "",
    "statusType": "auto",
    "x": 350,
    "y": 240,
    "wires": []
  },
  {
    "id": "comment-setup",
    "type": "comment",
    "z": "tls-mqtt-flow",
    "name": "Setup Instructions",
    "info": "## Setup Instructions\n\n1.  Configure an MQTT broker with TLS support (e.g., Mosquitto).\n2.  Generate the necessary TLS certificates (CA certificate, client certificate, and client key).\n3.  Update the `tls-config` node with the paths to your certificates.\n4.  Update the `mqtt-broker-tls` node with the correct broker address and TLS configuration.\n5.  Deploy the flow and observe the secure MQTT communication.",
    "x": 140,
    "y": 400,
    "wires": []
  }
]
