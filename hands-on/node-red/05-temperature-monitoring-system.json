[
    {
        "id": "temp-monitoring-flow",
        "type": "tab",
        "label": "Temperature Monitoring System",
        "disabled": false,
        "info": "# Temperature Monitoring System\n\nFlow นี้แสดงการตรวจสอบข้อมูลอุณหภูมิที่ได้รับผ่าน MQTT และแสดงผลบน Dashboard รวมทั้งส่งการแจ้งเตือนเมื่ออุณหภูมิสูงเกินกำหนด\n\n## การทำงาน\n1. รับข้อมูลอุณหภูมิจาก MQTT topic 'sensor/temperature'\n2. แสดงผลอุณหภูมิบน gauge และกราฟแบบ real-time\n3. ตรวจสอบค่าอุณหภูมิ หากสูงเกิน threshold จะส่งการแจ้งเตือน",
        "env": []
    },
    {
        "id": "mqtt-temp-in",
        "type": "mqtt in",
        "z": "temp-monitoring-flow",
        "name": "Temperature Data",
        "topic": "sensor/temperature",
        "qos": "1",
        "datatype": "json",
        "broker": "broker-config",
        "nl": false,
        "x": 170,
        "y": 120,
        "wires": [
            [
                "extract-temp",
                "debug1"
            ]
        ]
    },
    {
        "id": "extract-temp",
        "type": "function",
        "z": "temp-monitoring-flow",
        "name": "Extract Temperature",
        "func": "// ดึงค่าอุณหภูมิจากข้อความ MQTT\n// สมมติว่าข้อความอยู่ในรูปแบบ {\"temperature\": 25.5, \"deviceId\": \"device001\"}\n\nlet temperature;\n\nif (typeof msg.payload === 'object') {\n    // ถ้าเป็น object ให้ดึงค่า temperature\n    temperature = msg.payload.temperature;\n} else {\n    // พยายามแปลง string เป็น object\n    try {\n        const data = JSON.parse(msg.payload);\n        temperature = data.temperature;\n    } catch(e) {\n        // ถ้าแปลงไม่ได้ ให้ใช้ค่าที่ได้โดยตรง\n        temperature = Number(msg.payload);\n    }\n}\n\n// ตรวจสอบว่าค่าอุณหภูมิถูกต้องหรือไม่\nif (isNaN(temperature)) {\n    node.warn(\"Invalid temperature data\");\n    return null;\n}\n\n// สร้าง message ใหม่ที่มีแค่ค่า temperature\nmsg.payload = temperature;\n\n// เก็บข้อมูลทั้งหมดไว้ในตัวแปรอื่นเผื่อต้องใช้\nmsg.fullData = msg.payload;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 120,
        "wires": [
            [
                "gauge",
                "chart",
                "temp-check"
            ]
        ]
    },
    {
        "id": "gauge",
        "type": "ui_gauge",
        "z": "temp-monitoring-flow",
        "name": "Temperature Gauge",
        "group": "dashboard_group",
        "order": 1,
        "width": 0,
        "height": 0,
        "gtype": "gage",
        "title": "Current Temperature",
        "label": "°C",
        "format": "{{value}}",
        "min": 0,
        "max": "50",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "25",
        "seg2": "35",
        "className": "",
        "x": 590,
        "y": 80,
        "wires": []
    },
    {
        "id": "chart",
        "type": "ui_chart",
        "z": "temp-monitoring-flow",
        "name": "Temperature Chart",
        "group": "dashboard_group",
        "order": 2,
        "width": 0,
        "height": 0,
        "label": "Temperature History",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "50",
        "removeOlder": "10",
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 590,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "temp-check",
        "type": "switch",
        "z": "temp-monitoring-flow",
        "name": "Check Temperature",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gte",
                "v": "30",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 590,
        "y": 160,
        "wires": [
            [
                "create-alert"
            ]
        ]
    },
    {
        "id": "create-alert",
        "type": "function",
        "z": "temp-monitoring-flow",
        "name": "Create Alert",
        "func": "// สร้างข้อความแจ้งเตือนเมื่ออุณหภูมิสูงเกินกำหนด\n\nconst temperature = msg.payload;\nconst threshold = 30;\n\n// สร้างข้อความแจ้งเตือน\nmsg.payload = {\n    title: \"Temperature Alert\",\n    message: `Temperature (${temperature}°C) has exceeded threshold (${threshold}°C)!`,\n    severity: temperature >= 35 ? \"danger\" : \"warning\"\n};\n\n// บันทึกเวลาที่เกิดการแจ้งเตือน\nmsg.alertTime = new Date().toISOString();\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 200,
        "wires": [
            [
                "notification",
                "debug2"
            ]
        ]
    },
    {
        "id": "notification",
        "type": "ui_toast",
        "z": "temp-monitoring-flow",
        "position": "top right",
        "displayTime": "5",
        "highlight": "",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "",
        "name": "Alert Notification",
        "x": 780,
        "y": 200,
        "wires": []
    },
    {
        "id": "debug1",
        "type": "debug",
        "z": "temp-monitoring-flow",
        "name": "Raw Temperature Data",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 380,
        "y": 60,
        "wires": []
    },
    {
        "id": "debug2",
        "type": "debug",
        "z": "temp-monitoring-flow",
        "name": "Alert Data",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 760,
        "y": 240,
        "wires": []
    },
    {
        "id": "inject-random",
        "type": "inject",
        "z": "temp-monitoring-flow",
        "name": "Simulate Temperature",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "sensor/temperature",
        "payload": "",
        "payloadType": "date",
        "x": 180,
        "y": 240,
        "wires": [
            [
                "generate-random-temp"
            ]
        ]
    },
    {
        "id": "generate-random-temp",
        "type": "function",
        "z": "temp-monitoring-flow",
        "name": "Generate Random Temperature",
        "func": "// สร้างค่าอุณหภูมิสุ่มเพื่อจำลองข้อมูลจากเซนเซอร์\n\n// ค่าเริ่มต้นถ้ายังไม่มีค่าก่อนหน้า\nif (!context.lastTemp) {\n    context.lastTemp = 25;\n}\n\n// สุ่มค่าอุณหภูมิใหม่โดยให้ค่าไม่เปลี่ยนแปลงเกิน +/- 2 องศา\nconst min = context.lastTemp - 2;\nconst max = context.lastTemp + 2;\nconst randomTemp = Math.random() * (max - min) + min;\n\n// ป้องกันไม่ให้ค่าต่ำเกินไปหรือสูงเกินไป\nconst temperature = Math.max(10, Math.min(45, randomTemp));\n\n// เก็บค่าปัจจุบันเพื่อใช้ในครั้งถัดไป\ncontext.lastTemp = temperature;\n\n// สร้างข้อมูลจำลองในรูปแบบที่เหมือนข้อมูลจริง\nmsg.payload = {\n    temperature: Number(temperature.toFixed(1)),\n    humidity: Math.floor(Math.random() * 30) + 50,\n    deviceId: \"simulator-001\",\n    timestamp: new Date().toISOString()\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 240,
        "wires": [
            [
                "mqtt-out",
                "extract-temp"
            ]
        ]
    },
    {
        "id": "mqtt-out",
        "type": "mqtt out",
        "z": "temp-monitoring-flow",
        "name": "Publish Temperature",
        "topic": "sensor/temperature",
        "qos": "1",
        "retain": "false",
        "broker": "broker-config",
        "x": 620,
        "y": 280,
        "wires": []
    },
    {
        "id": "info-node",
        "type": "comment",
        "z": "temp-monitoring-flow",
        "name": "Temperature Monitoring System",
        "info": "# Temperature Monitoring System\n\n## วิธีใช้งาน\n1. Flow นี้รับข้อมูลอุณหภูมิผ่าน MQTT topic 'sensor/temperature'\n2. แสดงผลข้อมูลบน Dashboard ในรูปแบบ gauge และกราฟเส้น\n3. ตั้งค่า threshold ที่ 30°C สำหรับการแจ้งเตือน\n4. มีการจำลองข้อมูลอุณหภูมิทุก 5 วินาที\n\n## การปรับแต่ง\n- เปลี่ยนค่า threshold ในโหนด 'Check Temperature' และ 'Create Alert'\n- ปรับการแสดงผลของ Dashboard ใน UI group\n- เปลี่ยนช่วงเวลาในการจำลองข้อมูลที่โหนด 'Simulate Temperature'\n\n## การเชื่อมต่อกับเซ็นเซอร์จริง\nในการใช้งานจริง สามารถเชื่อมต่อกับเซ็นเซอร์วัดอุณหภูมิที่ส่งข้อมูลผ่าน MQTT ได้โดยตรง โดยอาจจะไม่จำเป็นต้องใช้ส่วนจำลองข้อมูล",
        "x": 180,
        "y": 60,
        "wires": []
    },
    {
        "id": "broker-config",
        "type": "mqtt-broker",
        "name": "Local MQTT Broker",
        "broker": "localhost",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "dashboard_group",
        "type": "ui_group",
        "name": "Temperature Monitoring",
        "tab": "dashboard_tab",
        "order": 1,
        "disp": true,
        "width": "12",
        "collapse": false,
        "className": ""
    },
    {
        "id": "dashboard_tab",
        "type": "ui_tab",
        "name": "IoT Workshop",
        "icon": "dashboard",
        "order": 1,
        "disabled": false,
        "hidden": false
    }
]
