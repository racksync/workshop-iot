[
    {
        "id": "exercise2-flow",
        "type": "tab",
        "label": "Exercise 2: Real-time Dashboard with MQTT",
        "info": "# Real-time Dashboard with MQTT\n\nThis flow demonstrates how to create a real-time dashboard using MQTT data.\n\n## Components Used:\n- MQTT In node\n- JSON node\n- Dashboard gauge and chart nodes\n\n## How to Use:\n1. Configure the MQTT broker settings\n2. Publish sensor data to topic 'sensor/temperature' with payload like {\"value\": 25}\n3. Publish sensor data to topic 'sensor/humidity' with payload like {\"value\": 60}\n4. View the dashboard at http://localhost:1880/ui"
    },
    {
        "id": "mqtt-temperature",
        "type": "mqtt in",
        "z": "exercise2-flow",
        "name": "Temperature Sensor",
        "topic": "sensor/temperature",
        "qos": "0",
        "datatype": "json",
        "broker": "mqtt-broker",
        "x": 150,
        "y": 100,
        "wires": [
            [
                "process-temp",
                "debug-temp"
            ]
        ]
    },
    {
        "id": "mqtt-humidity",
        "type": "mqtt in",
        "z": "exercise2-flow",
        "name": "Humidity Sensor",
        "topic": "sensor/humidity",
        "qos": "0",
        "datatype": "json",
        "broker": "mqtt-broker",
        "x": 150,
        "y": 200,
        "wires": [
            [
                "process-humidity",
                "debug-humidity"
            ]
        ]
    },
    {
        "id": "process-temp",
        "type": "function",
        "z": "exercise2-flow",
        "name": "Process Temperature",
        "func": "// Extract temperature value from MQTT message\n// Expecting format: {\"value\": 25}\nlet temperature = msg.payload.value;\n\n// Add timestamp for chart\nmsg.payload = temperature;\nmsg.topic = \"temperature\";\n\n// Add timestamp for charts\nmsg.timestamp = new Date().getTime();\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 350,
        "y": 100,
        "wires": [
            [
                "temperature-gauge",
                "temperature-chart"
            ]
        ]
    },
    {
        "id": "process-humidity",
        "type": "function",
        "z": "exercise2-flow",
        "name": "Process Humidity",
        "func": "// Extract humidity value from MQTT message\n// Expecting format: {\"value\": 60}\nlet humidity = msg.payload.value;\n\n// Format for dashboard\nmsg.payload = humidity;\nmsg.topic = \"humidity\";\n\n// Add timestamp for charts\nmsg.timestamp = new Date().getTime();\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 350,
        "y": 200,
        "wires": [
            [
                "humidity-gauge",
                "humidity-chart"
            ]
        ]
    },
    {
        "id": "temperature-gauge",
        "type": "ui_gauge",
        "z": "exercise2-flow",
        "name": "Temperature Gauge",
        "group": "dashboard-group",
        "order": 1,
        "width": "6",
        "height": "6",
        "gtype": "gage",
        "title": "Temperature",
        "label": "°C",
        "format": "{{value}}",
        "min": 0,
        "max": "50",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "25",
        "seg2": "35",
        "x": 580,
        "y": 80,
        "wires": []
    },
    {
        "id": "humidity-gauge",
        "type": "ui_gauge",
        "z": "exercise2-flow",
        "name": "Humidity Gauge",
        "group": "dashboard-group",
        "order": 3,
        "width": "6",
        "height": "6",
        "gtype": "gage",
        "title": "Humidity",
        "label": "%",
        "format": "{{value}}",
        "min": 0,
        "max": "100",
        "colors": [
            "#ca3838",
            "#e6e600",
            "#00b500"
        ],
        "seg1": "30",
        "seg2": "50",
        "x": 580,
        "y": 180,
        "wires": []
    },
    {
        "id": "temperature-chart",
        "type": "ui_chart",
        "z": "exercise2-flow",
        "name": "Temperature Chart",
        "group": "dashboard-group",
        "order": 2,
        "width": "12",
        "height": "6",
        "label": "Temperature History",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "Waiting for data...",
        "dot": false,
        "ymin": "0",
        "ymax": "50",
        "removeOlder": "10",
        "removeOlderPoints": "100",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "x": 580,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "humidity-chart",
        "type": "ui_chart",
        "z": "exercise2-flow",
        "name": "Humidity Chart",
        "group": "dashboard-group",
        "order": 4,
        "width": "12",
        "height": "6",
        "label": "Humidity History",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "Waiting for data...",
        "dot": false,
        "ymin": "0",
        "ymax": "100",
        "removeOlder": "10",
        "removeOlderPoints": "100",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "x": 580,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "debug-temp",
        "type": "debug",
        "z": "exercise2-flow",
        "name": "Debug Temperature",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 360,
        "y": 40,
        "wires": []
    },
    {
        "id": "debug-humidity",
        "type": "debug",
        "z": "exercise2-flow",
        "name": "Debug Humidity",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 360,
        "y": 260,
        "wires": []
    },
    {
        "id": "mqtt-simulator",
        "type": "inject",
        "z": "exercise2-flow",
        "name": "Simulator",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 340,
        "wires": [
            [
                "generate-sensor-data"
            ]
        ]
    },
    {
        "id": "generate-sensor-data",
        "type": "function",
        "z": "exercise2-flow",
        "name": "Generate Random Data",
        "func": "// Generate random temperature between 20-35°C\nconst temp = 20 + Math.random() * 15;\nconst tempMsg = {\n    topic: \"sensor/temperature\",\n    payload: { value: Math.round(temp * 10) / 10 }\n};\n\n// Generate random humidity between 40-80%\nconst humidity = 40 + Math.random() * 40;\nconst humidityMsg = {\n    topic: \"sensor/humidity\",\n    payload: { value: Math.round(humidity) }\n};\n\n// Send both messages\nreturn [tempMsg, humidityMsg];",
        "outputs": 2,
        "noerr": 0,
        "x": 330,
        "y": 340,
        "wires": [
            [
                "mqtt-out-temp"
            ],
            [
                "mqtt-out-humidity"
            ]
        ]
    },
    {
        "id": "mqtt-out-temp",
        "type": "mqtt out",
        "z": "exercise2-flow",
        "name": "Publish Temperature",
        "topic": "sensor/temperature",
        "qos": "",
        "retain": "",
        "broker": "mqtt-broker",
        "x": 590,
        "y": 310,
        "wires": []
    },
    {
        "id": "mqtt-out-humidity",
        "type": "mqtt out",
        "z": "exercise2-flow",
        "name": "Publish Humidity",
        "topic": "sensor/humidity",
        "qos": "",
        "retain": "",
        "broker": "mqtt-broker",
        "x": 590,
        "y": 370,
        "wires": []
    },
    {
        "id": "mqtt-broker",
        "type": "mqtt-broker",
        "name": "Local MQTT Broker",
        "broker": "localhost",
        "port": "1883",
        "clientid": "",
        "usetls": false,
        "compatmode": false,
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "willTopic": "",
        "willQos": "0",
        "willPayload": ""
    },
    {
        "id": "dashboard-group",
        "type": "ui_group",
        "name": "Sensor Dashboard",
        "tab": "dashboard-tab",
        "order": 1,
        "disp": true,
        "width": "12",
        "collapse": false
    },
    {
        "id": "dashboard-tab",
        "type": "ui_tab",
        "name": "IoT Dashboard",
        "icon": "dashboard",
        "order": 1,
        "disabled": false,
        "hidden": false
    }
]
