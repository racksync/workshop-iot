[
    {
        "id": "mqtt-ws-bridge-flow",
        "type": "tab",
        "label": "MQTT to WebSocket Bridge",
        "disabled": false,
        "info": "# MQTT to WebSocket Bridge\n\nFlow นี้แสดงการรับข้อมูลจาก MQTT แล้วส่งต่อไปยัง WebSocket เพื่อให้ WebSocket clients สามารถรับข้อมูลได้แบบ real-time\n\n## การทำงาน\n1. รับข้อมูลจาก MQTT topic 'sensor/data'\n2. แปลงข้อมูลให้อยู่ในรูปแบบที่เหมาะสม\n3. ส่งต่อข้อมูลไปยัง WebSocket endpoint '/ws/sensor'\n4. แสดงข้อมูลใน Debug console",
        "env": []
    },
    {
        "id": "mqtt-in-node",
        "type": "mqtt in",
        "z": "mqtt-ws-bridge-flow",
        "name": "Subscribe to MQTT Topic",
        "topic": "sensor/data",
        "qos": "2",
        "datatype": "json",
        "broker": "broker-config",
        "nl": false,
        "x": 180,
        "y": 120,
        "wires": [
            [
                "transform-function",
                "debug1"
            ]
        ]
    },
    {
        "id": "transform-function",
        "type": "function",
        "z": "mqtt-ws-bridge-flow",
        "name": "Transform Data",
        "func": "// แปลงรูปแบบข้อมูลจาก MQTT สู่รูปแบบที่ WebSocket ต้องการ\n// เพิ่ม timestamp และฟอร์แมตข้อมูลให้เหมาะสม\n\nlet data = msg.payload;\n\n// เพิ่ม timestamp ปัจจุบัน\ndata.timestamp = new Date().toISOString();\n\n// สร้าง message ใหม่เพื่อส่งไปยัง WebSocket\nmsg.payload = {\n    source: \"mqtt\",\n    topic: msg.topic,\n    data: data\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 120,
        "wires": [
            [
                "websocket-out",
                "debug2"
            ]
        ]
    },
    {
        "id": "websocket-out",
        "type": "websocket out",
        "z": "mqtt-ws-bridge-flow",
        "name": "Send to WebSocket",
        "server": "ws-server-config",
        "client": "",
        "x": 600,
        "y": 120,
        "wires": []
    },
    {
        "id": "debug1",
        "type": "debug",
        "z": "mqtt-ws-bridge-flow",
        "name": "MQTT Input",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 380,
        "y": 180,
        "wires": []
    },
    {
        "id": "debug2",
        "type": "debug",
        "z": "mqtt-ws-bridge-flow",
        "name": "WebSocket Output",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 600,
        "y": 180,
        "wires": []
    },
    {
        "id": "inject-test",
        "type": "inject",
        "z": "mqtt-ws-bridge-flow",
        "name": "Test Data",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "sensor/data",
        "payload": "{\"temperature\":25.5,\"humidity\":60,\"deviceId\":\"device001\"}",
        "payloadType": "json",
        "x": 150,
        "y": 180,
        "wires": [
            [
                "transform-function"
            ]
        ]
    },
    {
        "id": "info-node",
        "type": "comment",
        "z": "mqtt-ws-bridge-flow",
        "name": "MQTT to WebSocket Bridge Exercise",
        "info": "# MQTT to WebSocket Bridge\n\nFlow นี้แสดงการรับข้อมูลจาก MQTT topic และส่งต่อไปยัง WebSocket endpoint\n\n## วิธีใช้งาน\n1. ตั้งค่า MQTT Broker ในโหนด 'Subscribe to MQTT Topic'\n2. ตั้งค่า WebSocket Server ในโหนด 'Send to WebSocket'\n3. ปรับแต่ง transformation function ตามความต้องการ\n4. ทดสอบโดยใช้ปุ่ม 'Test Data' หรือส่งข้อมูลจริงผ่าน MQTT Broker\n\nหมายเหตุ: WebSocket client สามารถเชื่อมต่อที่ ws://[server-ip]:[port]/ws/sensor",
        "x": 190,
        "y": 60,
        "wires": []
    },
    {
        "id": "broker-config",
        "type": "mqtt-broker",
        "name": "Local MQTT Broker",
        "broker": "localhost",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "ws-server-config",
        "type": "websocket-listener",
        "path": "/ws/sensor",
        "wholemsg": "false"
    }
]
