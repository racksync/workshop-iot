[
  {
    "id": "device-management-flow",
    "type": "tab",
    "label": "Exercise 18: Automated Device Management",
    "disabled": false,
    "info": "# Automated Device Management\n\nThis flow demonstrates how to automate device management tasks in Node-RED, such as firmware updates and configuration changes.\n\n## Components Used\n- MQTT In node: To receive commands from a management system.\n- Function node: To process the commands and generate responses.\n- MQTT Out node: To send commands to the devices.\n\n## Instructions\n1. Import this flow into Node-RED.\n2. Configure the MQTT In node with the appropriate broker settings and topic for receiving commands.\n3. Modify the Function node to process the commands and generate the appropriate responses.\n4. Configure the MQTT Out node with the appropriate broker settings and topic for sending commands to the devices.\n5. Deploy the flow.\n6. Send commands to the devices through the management system.",
    "env": []
  },
  {
    "id": "mqtt-in",
    "type": "mqtt in",
    "z": "device-management-flow",
    "name": "Management Commands",
    "topic": "management/commands",
    "qos": "0",
    "datatype": "json",
    "broker": "mqtt-broker",
    "nl": false,
    "rap": true,
    "rh": 0,
    "x": 150,
    "y": 160,
    "wires": [
      [
        "process-command"
      ]
    ]
  },
  {
    "id": "process-command",
    "type": "function",
    "z": "device-management-flow",
    "name": "Process Command",
    "func": "// Process the incoming management commands and generate responses\n\nlet command = msg.payload.command;\nlet deviceId = msg.payload.deviceId;\n\nlet response = {\n    deviceId: deviceId,\n    status: 'unknown',\n    message: ''\n};\n\nswitch (command) {\n    case 'firmware_update':\n        // Simulate firmware update process\n        response.status = 'updating';\n        response.message = 'Firmware update initiated';\n        break;\n    case 'reboot':\n        // Simulate reboot process\n        response.status = 'rebooting';\n        response.message = 'Device rebooting';\n        break;\n    case 'get_status':\n        // Simulate getting device status\n        response.status = 'online';\n        response.message = 'Device is online';\n        break;\n    default:\n        response.status = 'error';\n        response.message = 'Unknown command';\n}\n\nmsg.payload = response;\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "x": 350,
    "y": 160,
    "wires": [
      [
        "mqtt-out"
      ]
    ]
  },
  {
    "id": "mqtt-out",
    "type": "mqtt out",
    "z": "device-management-flow",
    "name": "Device Response",
    "topic": "device/response",
    "qos": "0",
    "retain": false,
    "respTopic": "",
    "contentType": "",
    "userProps": "",
    "correl": "",
    "expiry": "",
    "broker": "mqtt-broker",
    "x": 550,
    "y": 160,
    "wires": []
  },
  {
    "id": "mqtt-broker",
    "type": "mqtt-broker",
    "name": "MQTT Broker",
    "broker": "localhost",
    "port": "1883",
    "clientid": "",
    "usetls": false,
    "protocolVersion": "4",
    "keepalive": "60",
    "cleansession": true,
    "birthTopic": "",
    "birthQos": "0",
    "birthPayload": "",
    "closeTopic": "",
    "closeQos": "0",
    "closePayload": "",
    "willTopic": "",
    "willQos": "0",
    "willPayload": ""
  },
  {
    "id": "comment-instructions",
    "type": "comment",
    "z": "device-management-flow",
    "name": "Instructions",
    "info": "This flow demonstrates automated device management.\n\n1.  Configure the MQTT In node with the topic for receiving management commands.\n2.  Modify the Function node to process the commands and generate responses.\n3.  Configure the MQTT Out node with the topic for sending commands to the devices.\n\nExample command:\n```json\n{\n    \"deviceId\": \"device001\",\n    \"command\": \"firmware_update\"\n}\n```",
    "x": 140,
    "y": 80,
    "wires": []
  }
]
