[
  {
    "id": "digital-twin-flow",
    "type": "tab",
    "label": "Exercise 17: Implementing a Digital Twin",
    "disabled": false,
    "info": "# Implementing a Digital Twin\n\nThis flow demonstrates how to create a digital twin of a physical device in Node-RED. It receives data from an MQTT topic, updates the digital twin's state, and visualizes the state on a dashboard.\n\n## Components Used\n- MQTT In node: To receive data from the physical device.\n- Function node: To update the digital twin's state.\n- Dashboard nodes: To visualize the digital twin's state.\n\n## Instructions\n1. Import this flow into Node-RED.\n2. Configure the MQTT In node with the appropriate broker settings and topic.\n3. Modify the Function node to update the digital twin's state based on the incoming data.\n4. Deploy the flow.\n5. Observe the digital twin's state being updated on the dashboard.",
    "env": []
  },
  {
    "id": "mqtt-in",
    "type": "mqtt in",
    "z": "digital-twin-flow",
    "name": "Device Data",
    "topic": "device/sensor",
    "qos": "0",
    "datatype": "json",
    "broker": "mqtt-broker",
    "nl": false,
    "rap": true,
    "rh": 0,
    "x": 150,
    "y": 160,
    "wires": [
      [
        "update-twin"
      ]
    ]
  },
  {
    "id": "update-twin",
    "type": "function",
    "z": "digital-twin-flow",
    "name": "Update Digital Twin",
    "func": "// Update the digital twin's state based on the incoming data\n// The digital twin's state is stored in flow context\n\nlet twin = flow.get('twin') || {\n    temperature: 0,\n    humidity: 0,\n    status: 'idle'\n};\n\n// Update the twin's state with the new data\nif (msg.payload.temperature) {\n    twin.temperature = msg.payload.temperature;\n}\nif (msg.payload.humidity) {\n    twin.humidity = msg.payload.humidity;\n}\nif (msg.payload.status) {\n    twin.status = msg.payload.status;\n}\n\n// Store the updated twin in flow context\nflow.set('twin', twin);\n\n// Send the updated twin to the dashboard\nmsg.payload = twin;\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "x": 350,
    "y": 160,
    "wires": [
      [
        "temperature-gauge",
        "humidity-gauge",
        "status-text"
      ]
    ]
  },
  {
    "id": "temperature-gauge",
    "type": "ui_gauge",
    "z": "digital-twin-flow",
    "name": "Temperature",
    "group": "dashboard-group",
    "order": 1,
    "width": 0,
    "height": 0,
    "gtype": "gage",
    "title": "Temperature",
    "label": "Â°C",
    "format": "{{value.temperature}}",
    "min": 0,
    "max": "50",
    "colors": [
      "#00b500",
      "#e6e600",
      "#ca3838"
    ],
    "seg1": "25",
    "seg2": "35",
    "className": "",
    "x": 550,
    "y": 100,
    "wires": []
  },
  {
    "id": "humidity-gauge",
    "type": "ui_gauge",
    "z": "digital-twin-flow",
    "name": "Humidity",
    "group": "dashboard-group",
    "order": 2,
    "width": 0,
    "height": 0,
    "gtype": "gage",
    "title": "Humidity",
    "label": "%",
    "format": "{{value.humidity}}",
    "min": 0,
    "max": "100",
    "colors": [
      "#00b500",
      "#e6e600",
      "#ca3838"
    ],
    "seg1": "30",
    "seg2": "60",
    "className": "",
    "x": 550,
    "y": 160,
    "wires": []
  },
  {
    "id": "status-text",
    "type": "ui_text",
    "z": "digital-twin-flow",
    "group": "dashboard-group",
    "order": 3,
    "width": 0,
    "height": 0,
    "name": "Status",
    "label": "Status",
    "format": "{{value.status}}",
    "layout": "row-spread",
    "className": "",
    "x": 540,
    "y": 220,
    "wires": []
  },
  {
    "id": "mqtt-broker",
    "type": "mqtt-broker",
    "name": "MQTT Broker",
    "broker": "localhost",
    "port": "1883",
    "clientid": "",
    "usetls": false,
    "protocolVersion": "4",
    "keepalive": "60",
    "cleansession": true,
    "birthTopic": "",
    "birthQos": "0",
    "birthPayload": "",
    "closeTopic": "",
    "closeQos": "0",
    "closePayload": "",
    "willTopic": "",
    "willQos": "0",
    "willPayload": ""
  },
  {
    "id": "dashboard-group",
    "type": "ui_group",
    "name": "Digital Twin",
    "tab": "dashboard-tab",
    "order": 1,
    "disp": true,
    "width": "6",
    "collapse": false,
    "className": ""
  },
  {
    "id": "dashboard-tab",
    "type": "ui_tab",
    "name": "Digital Twin",
    "icon": "dashboard",
    "order": 1,
    "disabled": false,
    "hidden": false
  },
  {
    "id": "comment-instructions",
    "type": "comment",
    "z": "digital-twin-flow",
    "name": "Instructions",
    "info": "This flow demonstrates how to create a digital twin in Node-RED.\n\n1.  Configure the MQTT In node with the topic that the physical device publishes to.\n2.  Modify the Function node to update the digital twin's state based on the incoming data.\n3.  Observe the digital twin's state being updated on the dashboard.",
    "x": 140,
    "y": 80,
    "wires": []
  }
]
